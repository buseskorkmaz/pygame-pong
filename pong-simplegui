# Implementation of classic arcade game Pong

import simplegui
import random

# initialize globals - pos and vel encode vertical info for paddles
WIDTH = 1000
HEIGHT = 600     
BALL_RADIUS = 20
PAD_WIDTH = 8
PAD_HEIGHT = 160
HALF_PAD_WIDTH = PAD_WIDTH / 2
HALF_PAD_HEIGHT = PAD_HEIGHT / 2
LEFT = False
RIGHT = True
paddle1_pos = HEIGHT / 2
paddle2_pos = HEIGHT / 2
paddle1_vel = 0
paddle2_vel = 0
direction = LEFT
score1 = 0
score2 = 0
# initialize ball_pos and ball_vel for new bal in middle of table
ball_pos = [WIDTH/2,HEIGHT/2]
ball_vel = [10,10]
# if direction is RIGHT, the ball's velocity is upper right, else upper left
def spawn_ball(direction):
    global ball_pos, ball_vel # these are vectors stored as lists
    ball_pos = [600,300]
    if direction == RIGHT:
        ball_vel[0] = random.randrange(120,240) / 60
        ball_vel[1] = -random.randrange(60,180) / 60
    elif direction == LEFT:
        ball_vel[0] = -random.randrange(120,240) / 60
        ball_vel[1] = -random.randrange(60,180) / 60
# define event handlers
def new_game():
    global paddle1_pos, paddle2_pos, paddle1_vel, paddle2_vel  # these are numbers
    global score1, score2  # these are ints
    spawn_ball(direction)
    score1=0
    score2=0
def draw(canvas):
    global score1, score2, paddle1_pos, paddle2_pos, ball_pos, ball_vel
    # draw mid line and gutters
    canvas.draw_line([WIDTH / 2, 0],[WIDTH / 2, HEIGHT], 2, "White")
    canvas.draw_line([PAD_WIDTH, 0],[PAD_WIDTH, HEIGHT], 2, "White")
    canvas.draw_line([WIDTH - PAD_WIDTH, 0],[WIDTH - PAD_WIDTH, HEIGHT], 2, "White")
        
    # update ball
    ball_pos[0] = ball_pos[0] + ball_vel[0]
    ball_pos[1] = ball_pos[1] + ball_vel[1]
    if ball_pos[0] <= (BALL_RADIUS + PAD_WIDTH) or ball_pos[0] >= (WIDTH - PAD_WIDTH - BALL_RADIUS):        
        ball_vel[0] *= -1
        if (ball_pos[0] > WIDTH/2):             
            if (ball_pos[1] < paddle2_pos) or (ball_pos[1] > paddle2_pos + PAD_HEIGHT):
                score1 += 1 
                spawn_ball(LEFT) 
        if (ball_pos[0] < WIDTH/2):
            if (ball_pos[1] < paddle1_pos) or (ball_pos[1] > paddle1_pos + PAD_HEIGHT ):
                score2 += 1
                spawn_ball(RIGHT)
    if ball_pos[1] <= BALL_RADIUS or ball_pos[1] >= (HEIGHT - BALL_RADIUS):
         ball_vel[1] = -ball_vel[1]
     
    # draw ball
    canvas.draw_circle(ball_pos,BALL_RADIUS,10,"White","White")
    
    # update paddle's vertical position, keep paddle on the screen
    paddle1_pos = paddle1_pos + paddle1_vel
    paddle2_pos = paddle2_pos + paddle2_vel
    if paddle1_pos >= 440:
        paddle1_pos = 440
    if paddle1_pos <= 0:
        paddle1_pos = 0
    if paddle2_pos <= 0:
        paddle2_pos = 0
    if paddle2_pos >= 440:
        paddle2_pos = 440
    # draw paddles
    canvas.draw_polygon([[0, paddle1_pos], [PAD_WIDTH, paddle1_pos],[PAD_WIDTH, (paddle1_pos) + PAD_HEIGHT ],[0, (paddle1_pos) + PAD_HEIGHT]],1, "white", "white") 
    canvas.draw_polygon([[WIDTH, paddle2_pos], [WIDTH - PAD_WIDTH, paddle2_pos],[WIDTH - PAD_WIDTH, paddle2_pos + PAD_HEIGHT], [WIDTH, paddle2_pos + PAD_HEIGHT]],1, "white", "white")
    # determine whether paddle and ball collide    
    if ball_pos[0]==28:
        if ball_pos[1] in range(paddle1_pos-80,paddle1_pos+80):
            ball_vel[0] = -ball_vel[0]
            ball_vel[0] += .1 * ball_vel[0]
    if ball_pos[0]==971.8:
        if ball_pos[1] in range(paddle2_pos-80,paddle2_pos+80):
            ball_vel[0] = -ball_vel[0]
            ball_vel[0] += .1 * ball_vel[0]
    # draw scores
    canvas.draw_text(str(score1),[WIDTH/2-60,60],36,"White")
    canvas.draw_text(str(score2),[WIDTH/2+60,60],36,"White")
def keydown(key):
    global paddle1_vel, paddle2_vel
    if key == simplegui.KEY_MAP['w']:
        paddle1_vel -= 10
    if key == simplegui.KEY_MAP['s']:
        paddle1_vel += 10
    if key == simplegui.KEY_MAP["up"]:
        paddle2_vel -= 10
    if key == simplegui.KEY_MAP["down"]:
        paddle2_vel += 10
def keyup(key):
    global paddle1_vel, paddle2_vel
    if key == simplegui.KEY_MAP['w']:
        paddle1_vel += 10
    if key == simplegui.KEY_MAP['s']:
        paddle1_vel -= 10
    if key == simplegui.KEY_MAP["up"]:
        paddle2_vel += 10
    if key == simplegui.KEY_MAP["down"]:
        paddle2_vel -= 10
# create frame
frame = simplegui.create_frame("Pong", WIDTH, HEIGHT)
frame.set_draw_handler(draw)
frame.set_keydown_handler(keydown)
frame.set_keyup_handler(keyup)
frame.add_button("Restart",new_game,100)

# start frame
new_game()
frame.start()
